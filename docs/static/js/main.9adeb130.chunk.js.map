{"version":3,"sources":["store/actions.js","store/thunks.js","config/index.js","components/FilmSearch/MainFilmSearchHeader/index.js","components/FilmSearch/MainFilmSearchFooter/index.js","components/FilmSearch/index.js","components/FilmSearch/filmPromo.js","pages/Main/index.js","pages/Film/index.js","store/reducers.js","store/store.js","App.js","serviceWorker.js","index.js"],"names":["setFilms","films","type","fetchFilmsByQuery","query","page","console","log","dispatch","requestStr","axios","get","then","response","data","Response","Search","Input","connect","setSearchValue","style","height","display","flexDirection","placeholder","allowClear","enterButton","size","onSearch","searchValue","width","marginTop","alignSelf","useState","numberOfPage","setNumberOfPage","useEffect","block","onClick","history","useHistory","options","setOptions","onKeyUp","event","target","value","map","title","Title","imdbId","imdbID","onOptionSelected","push","filterOption","displayOption","maxVisible","FilmPromo","film","src","Poster","alt","className","Year","Released","Genre","Director","Actors","Awards","to","Card","Meta","state","gutter","filmId","useParams","isLoading","_getState","payload","fetchFilmById","FilmSearch","margin","frameBorder","allowFullScreen","renderInfoPage","initState","createStore","action","oldFilms","newFilms","concat","applyMiddleware","thunk","App","store","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9adeb130.chunk.js","sourcesContent":["export const SET_FILMS = 'SET_FILMS';\nexport const setFilms = (films) => ({ type: SET_FILMS, films});\nexport const SET_FILM = 'SET_FILM';\nexport const setFilm = (payload) => ({ type: SET_FILM, payload});\n","import axios from 'axios';\nimport { omdbApiKey } from '../config';\nimport { setFilm, setFilms } from './actions'\n\nexport const fetchFilmById = (filmId) => {\n  return (dispatch, _getState) => {\n    const requestStr = `http://www.omdbapi.com/?i=${filmId}&apikey=${omdbApiKey}`;\n    axios.get(requestStr).then((response) => {\n      if (response.data.Response === 'True') {\n        return dispatch(setFilm({film: response.data}));\n      }\n    })\n  }\n}\n\nexport const fetchFilmsByQuery = (query, page = '1') => {\n  console.log(query, page)\n  return (dispatch) => {\n    const requestStr = `http://www.omdbapi.com/?s=${query}&page=${page}&apikey=${omdbApiKey}`;\n    axios.get(requestStr).then((response) => {\n      if (response.data.Response === 'True') {\n        dispatch(setFilms(response.data.Search))\n      }\n    })\n  }\n}","export const omdbApiKey = '7019ebd8';","import React from 'react';\nimport { Input } from 'antd';\nimport { connect } from 'react-redux'\nimport { fetchFilmsByQuery } from '../../../store/thunks'\nimport { Button } from 'antd';\n\nconst { Search } = Input;\n\nconst MainFilmSearchHeader = ({ dispatch, setSearchValue }) => {\n  const handleSearchFieldSubmit = (searchValue) => {\n    dispatch(fetchFilmsByQuery(searchValue))\n    setSearchValue(searchValue)\n  }\n  return (\n    <div style={{height:'100%', display: 'flex', flexDirection: 'column'}}>\n      <Search\n        placeholder=\"Введите название фильма\"\n        allowClear\n        enterButton=\"Найти\"\n        size=\"small\"\n        onSearch={handleSearchFieldSubmit}\n        style={{width:\"300px\",/* marginLeft:'8px',*/ marginTop:'7px', alignSelf: 'flex-start'}}\n      />\n    </div>\n  )\n}\n\nexport default connect()(MainFilmSearchHeader)\n ","import React, {useEffect, useMemo, useState} from 'react';\n// import { Input } from 'antd';\nimport { connect } from 'react-redux'\nimport { fetchFilmsByQuery } from '../../../store/thunks'\nimport { Button } from 'antd';\n\n// const { Search } = Input;\n\nconst MainFilmSearchFooter = ({ dispatch, searchValue}) => {\n  const [ numberOfPage, setNumberOfPage ] = useState(2)\n  // console.log(numberOfPage, searchValue)\n  useEffect(() => setNumberOfPage(2), [searchValue])\n  // const moreFilmsValue = useMemo(() => increment(value), [1]);\n  // const increment = (value) => value+1\n  const handleMoreFilmsButtonClick = (/*searchValue*/) => {\n    dispatch(fetchFilmsByQuery(searchValue, numberOfPage))\n    setNumberOfPage(numberOfPage+1)\n  }\n  return (\n    <Button type=\"primary\" block onClick={handleMoreFilmsButtonClick}> \n    {/* style={{ alignSelf: 'flex-end'}} */}\n      Загрузить еще 10 фильмов\n    </Button>\n  )\n}\n\nexport default connect()(MainFilmSearchFooter)\n ","import React, { useState } from 'react';\nimport axios from 'axios';\nimport { Typeahead } from 'react-typeahead';\nimport { useHistory } from 'react-router-dom';\nimport { omdbApiKey } from '../../config';\n\nexport default () => {\n    const history = useHistory();\n    const [options, setOptions] = useState([]);\n\n    const handleSearchFieldChange = (event) => {\n        const searchValue = event.target.value;\n        const requestStr = `http://www.omdbapi.com/?s=${searchValue}&apikey=${omdbApiKey}`;\n        axios.get(requestStr).then((response) => {\n            if (response.data.Response === 'True') {\n                const options = response.data.Search.map(({Title , imdbID}) => ({ title: Title , imdbId: imdbID }));\n                setOptions(options);\n            }\n        })\n    }\n\n    const handleOptionSelected = ({ imdbId }) => {\n        history.push(`/film/${ imdbId }`);\n    }\n\n    return (\n        <Typeahead onKeyUp={handleSearchFieldChange}\n            onOptionSelected={handleOptionSelected}\n            filterOption={'title'}\n            displayOption={'title'} \n            options={options}\n            maxVisible={6}\n            \n        />\n    );\n};\n","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport FilmSearch from '../../components/FilmSearch';\nimport { fetchFilmById } from '../../store/thunks'\n// const film = {\n//     \"Title\":\"Star Wars: Episode IV - A New Hope\",\n//     \"Year\":\"1977\", \n//     \"Rated\":\"PG\",\n//     \"Released\":\"25 May 1977\",\n//     \"Runtime\":\"121 min\",\n//     \"Genre\":\"Action, Adventure, Fantasy, Sci-Fi\",\n//     \"Director\":\"George Lucas\",\n//     \"Writer\":\"George Lucas\",\n//     \"Actors\":\"Mark Hamill, Harrison Ford, Carrie Fisher, Peter Cushing\",\n//     \"Plot\":\"The Imperial Forces, under orders from cruel Darth Vader, hold Princess Leia hostage in their efforts to quell the rebellion against the Galactic Empire. Luke Skywalker and Han Solo, captain of the Millennium Falcon, work together with the companionable droid duo R2-D2 and C-3PO to rescue the beautiful princess, help the Rebel Alliance and restore freedom and justice to the Galaxy.\",\n//     \"Language\":\"English\",\n//     \"Country\":\"USA\",\n//     \"Awards\":\"Won 6 Oscars. Another 52 wins & 29 nominations.\",\n//     \"Poster\":\"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\",\n//     \"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.6/10\"},{\"Source\":\"Rotten Tomatoes\",\"Value\":\"92%\"},{\"Source\":\"Metacritic\",\"Value\":\"90/100\"}],\"Metascore\":\"90\",\"imdbRating\":\"8.6\",\"imdbVotes\":\"1,208,256\",\"imdbID\":\"tt0076759\",\n//     \"Type\":\"movie\",\n//     \"DVD\":\"N/A\",\n//     \"BoxOffice\":\"N/A\",\n//     \"Production\":\"Lucasfilm Ltd.\",\n//     \"Website\":\"N/A\",\n//     \"Response\":\"True\"\n// }\n\nconst FilmPromo = ({film}) => {\n  console.log(film)\n    return (\n      <>\n      <div style={{display:\"flex\", flexDirection:\"row\"}}>\n      <div><img src={film.Poster} alt={film.Title} className=\"poster\"/></div>\n      <div>\n        <div className=\"title\">\n          <h1>{film.Title}</h1>\n        </div>\n        <h3>About:</h3>\n        <p>Year :       {film.Year}</p>\n        <p>Released :   {film.Released}</p>\n        <p>Genre :      {film.Genre}</p>\n        <p>Director :   {film.Director}</p>\n        <p>Actors :     {film.Actors}</p>\n        <p>Awards :     {film.Awards}</p>\n        <Link to='/'>Home</Link>\n      </div>\n      </div>\n      </>\n  \n    )\n  }\n\n\nexport default FilmPromo;","import React, {useState} from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport MainFilmSearchHeader from '../../components/FilmSearch/MainFilmSearchHeader';\nimport { Button, Card, Col, Row } from 'antd';\nimport MainFilmSearchFooter from '../../components/FilmSearch/MainFilmSearchFooter';\nimport FilmPromo from '../../components/FilmSearch/filmPromo'\n\nconst { Meta } = Card;\n\nconst Main = ({ films }) => {\n  const [ searchValue, setSearchValue ] = useState();\n  // const minHight = films.map((film) => film)\n  console.log(films)\n  return (\n    <>\n      <div className=\"header\">\n      </div>\n      <MainFilmSearchHeader setSearchValue={setSearchValue} />\n        {/* </MainFilmSearchHeader> */}\n      <div className=\"site-card-wrapper\" style={{marginTop:'5px'/*, display:'flex', justifyContent:'center'*/}}>\n      <Row gutter={16}>\n      { films.map((film) => {\n            console.log(films)\n        return <FilmPromo film={film} />\n      }\n      ) }\n      </Row>\n      </div>\n      <MainFilmSearchFooter searchValue={searchValue}/>\n        \n    </>\n  )\n}\n\n\n\n// export default connect(mapStateToProps)(Main);\nconst mapStateToProps = (state) => ({ films: state.films });\nexport default connect(mapStateToProps)(Main);\n// () => <Main films={films}/>\n\n\n// const films = [\n//     {\"Title\":\"Titanic\",\"Year\":\"1997\",\"imdbID\":\"tt0120338\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMDdmZGU3NDQtY2E5My00ZTliLWIzOTUtMTY4ZGI1YjdiNjk3XkEyXkFqcGdeQXVyNTA4NzY1MzY@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic II\",\"Year\":\"2010\",\"imdbID\":\"tt1640571\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTMxMjQ1MjA5Ml5BMl5BanBnXkFtZTcwNjIzNjg1Mw@@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic: The Legend Goes On...\",\"Year\":\"2000\",\"imdbID\":\"tt0330994\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTg5MjcxODAwMV5BMl5BanBnXkFtZTcwMTk4OTMwMg@@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic\",\"Year\":\"1953\",\"imdbID\":\"tt0046435\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTU3NTUyMTc3Nl5BMl5BanBnXkFtZTgwOTA2MDE3MTE@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic\",\"Year\":\"1996\",\"imdbID\":\"tt0115392\",\"Type\":\"series\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTBhMjUzMDItYTBlZS00OThkLWJmZDQtMjg1YTQ5ZDkxYmFjXkEyXkFqcGdeQXVyNjk1Njg5NTA@._V1_SX300.jpg\"},\n//     {\"Title\":\"Raise the Titanic\",\"Year\":\"1980\",\"imdbID\":\"tt0081400\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BM2MyZWYzOTQtMTYzNC00OWIyLWE2NWItMzMwODA0OGQ2ZTRkXkEyXkFqcGdeQXVyMjI4MjA5MzA@._V1_SX300.jpg\"},\n//     {\"Title\":\"The Legend of the Titanic\",\"Year\":\"1999\",\"imdbID\":\"tt1623780\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjMxNDU5MTk1MV5BMl5BanBnXkFtZTgwMDk5NDUyMTE@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic\",\"Year\":\"2012\",\"imdbID\":\"tt1869152\",\"Type\":\"series\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTA4MjIyZWEtZjYwMS00ZmQ1LWJiMDEtMWNiNTI5NWE3OGJjXkEyXkFqcGdeQXVyNjk1Njg5NTA@._V1_SX300.jpg\"},\n//     {\"Title\":\"Titanic: Blood and Steel\",\"Year\":\"2012–\",\"imdbID\":\"tt1695366\",\"Type\":\"series\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMjI2MzU2NzEzN15BMl5BanBnXkFtZTcwMzI5NTU3Nw@@._V1_SX300.jpg\"},\n//     {\"Title\":\"In Search of the Titanic\",\"Year\":\"2004\",\"imdbID\":\"tt1719665\",\"Type\":\"movie\",\"Poster\":\"https://m.media-amazon.com/images/M/MV5BMTAzNjY0NDA2NzdeQTJeQWpwZ15BbWU4MDIwMzc1MzEx._V1_SX300.jpg\"}\n// ];\n// {/* <div className=\"site-card-wrapper\">\n//     <Row gutter={16}>\n//       <Col span={8}>\n//         <Card title=\"Card title\" bordered={false}>\n//           Card content\n//         </Card>\n//       </Col>\n//       <Col span={8}>\n//         <Card title=\"Card title\" bordered={false}>\n//           Card content\n//         </Card>\n//       </Col>\n//       <Col span={8}>\n//         <Card title=\"Card title\" bordered={false}>\n//           Card content\n//         </Card>\n//       </Col>\n//     </Row>\n//  </div> */}","import React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux';\nimport { Link, useParams } from 'react-router-dom';\nimport FilmSearch from '../../components/FilmSearch';\nimport { fetchFilmById } from '../../store/thunks'\n// const film = {\n//     \"Title\":\"Star Wars: Episode IV - A New Hope\",\n//     \"Year\":\"1977\",\n//     \"Rated\":\"PG\",\n//     \"Released\":\"25 May 1977\",\n//     \"Runtime\":\"121 min\",\n//     \"Genre\":\"Action, Adventure, Fantasy, Sci-Fi\",\n//     \"Director\":\"George Lucas\",\n//     \"Writer\":\"George Lucas\",\n//     \"Actors\":\"Mark Hamill, Harrison Ford, Carrie Fisher, Peter Cushing\",\n//     \"Plot\":\"The Imperial Forces, under orders from cruel Darth Vader, hold Princess Leia hostage in their efforts to quell the rebellion against the Galactic Empire. Luke Skywalker and Han Solo, captain of the Millennium Falcon, work together with the companionable droid duo R2-D2 and C-3PO to rescue the beautiful princess, help the Rebel Alliance and restore freedom and justice to the Galaxy.\",\n//     \"Language\":\"English\",\n//     \"Country\":\"USA\",\n//     \"Awards\":\"Won 6 Oscars. Another 52 wins & 29 nominations.\",\n//     \"Poster\":\"https://m.media-amazon.com/images/M/MV5BNzVlY2MwMjktM2E4OS00Y2Y3LWE3ZjctYzhkZGM3YzA1ZWM2XkEyXkFqcGdeQXVyNzkwMjQ5NzM@._V1_SX300.jpg\",\n//     \"Ratings\":[{\"Source\":\"Internet Movie Database\",\"Value\":\"8.6/10\"},{\"Source\":\"Rotten Tomatoes\",\"Value\":\"92%\"},{\"Source\":\"Metacritic\",\"Value\":\"90/100\"}],\"Metascore\":\"90\",\"imdbRating\":\"8.6\",\"imdbVotes\":\"1,208,256\",\"imdbID\":\"tt0076759\",\n//     \"Type\":\"movie\",\n//     \"DVD\":\"N/A\",\n//     \"BoxOffice\":\"N/A\",\n//     \"Production\":\"Lucasfilm Ltd.\",\n//     \"Website\":\"N/A\",\n//     \"Response\":\"True\"\n// }\n\nconst Film = ({dispatch, film}) => {\n  const { filmId } = useParams();\n\n  const [ isLoading, setIsLoading ] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchFilmById(filmId))\n  }, [filmId])\n\n  const renderLoadingPage = () => {\n    return (\n      <>\n        <div style={{width: '490px', margin: 'auto'}}>\n          <iframe src=\"https://gifer.com/embed/3vTB\" width={480} height=\"545.280\" frameBorder={0} allowFullScreen title='humster'/>\n        </div>\n      </>\n    )\n  }\n\n  const renderInfoPage = (film) => {\n    return (\n      <>\n        <div className=\"background-films-page\">\n          <div className=\"wrapper\" style={{display:'flex', flexDirection: 'row',}}>\n            {/* <div className=\"left\"> */}\n              <img src={film.Poster} alt={film.Title} className=\"poster\"/>\n\n            {/* </div> */}\n            <div className=\"middle\">\n              <div className=\"title\">\n                <h1>{film.Title}</h1>\n              </div>\n              <h3>About:</h3>\n              <p>Year :       {film.Year}</p>\n              <p>Released :   {film.Released}</p>\n              <p>Genre :      {film.Genre}</p>\n              <p>Director :   {film.Director}</p>\n              <p>Actors :     {film.Actors}</p>\n              <p>Awards :     {film.Awards}</p>\n              <Link to='/'>Home</Link>\n            </div>\n            {/* <div className=\"right\"></div> */}\n          </div>\n        </div>\n      </>\n    )\n  }\n\n  const renderPage = () => {\n    if (isLoading) {\n        return renderLoadingPage();\n    }\n\n    return renderInfoPage(film);\n  }\n\n  return (\n    <>\n      <div className=\"header\">\n          <FilmSearch/>\n      </div>\n      {renderPage()}\n    </>\n  )\n}\n\nconst mapStateToProps = ({film}) => ({film});\nexport default connect(mapStateToProps)(Film);","import { SET_FILMS, SET_FILM } from \"./actions\";\n\nconst initState = {\n    film: {}, \n    films: []\n}\n\nexport const rootReducer = (state = initState, action) => {\n    // console.log(state, action.films)\n    // console.log({...state.films, action.films})\n    switch(action.type) {\n        case SET_FILM: {\n            const { payload: { film } } = action\n            return {\n                ...state,\n                film, \n            }\n        }\n        case SET_FILMS: {\n            const films  = action.films\n            // const { 'films':oldFilms } = state\n            const oldFilms = state.films\n            // console.log(oldFilms, films)\n            // console.log(oldFilms.concat(films))\n            const newFilms = oldFilms.concat(films)\n            return {\n                ...state,\n                films: newFilms\n                \n            }\n        }\n        default:\n            return state\n    }\n}\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers'\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\nimport Main from './pages/Main';\r\nimport Film from './pages/Film'\r\nimport store from './store/store'\r\n\r\n\r\n// http://www.omdbapi.com/?s=titanic&apikey=7019ebd8\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" ><Main /></Route>\r\n          <Route exact path=\"/film/:filmId\"><Film /></Route>\r\n        </Switch>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}